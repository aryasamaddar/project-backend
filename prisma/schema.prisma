// datasource and generator configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// enums
enum UserRole {
  FARMER
  BUYER
  ADMIN
  SUPER_ADMIN
}

enum CropType {
  VEGETABLE
  PULSE
  CEREAL
  ROOT
  TUBER
  HERB
  FRUIT
  NUT
  SPICE
  COTTON
  TOBACCO
  BEVERAGE
  FLOWERS
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  TERMINATED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum NegotiationStatus {
  INITIATED
  IN_PROGRESS
  AGREED
  CANCELLED
}

// models
model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  role        UserRole      @default(FARMER)
  offers      Offer[]
  Negotiation Negotiation[]
  contracts   Contract[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
}

model Offer {
  id            String        @id @default(uuid())
  cropName      String
  description   String?
  cropType      CropType
  price         Float
  // duration      Int // Duration in days
  quantity      Int
  harvestTime   DateTime?
  location      String
  offerDuration String
  paymentTerms  String
  createdBy     String
  createdByUser User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  contracts     Contract[]
  negotiations  Negotiation[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Negotiation {
  id        String            @id @default(uuid())
  offerId   String
  buyerId   String
  status    NegotiationStatus @default(INITIATED)
  details   String?
  offer     Offer             @relation(fields: [offerId], references: [id], onDelete: Cascade)
  buyer     User              @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Contract {
  id        String         @id @default(uuid())
  status    ContractStatus @default(PENDING)
  offerId   String
  offer     Offer          @relation(fields: [offerId], references: [id], onDelete: Cascade)
  buyerId   String
  buyer     User           @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  payments  Payment[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Payment {
  id         String        @id @default(uuid())
  amount     Float
  status     PaymentStatus @default(PENDING)
  contractId String
  contract   Contract      @relation(fields: [contractId], references: [id], onDelete: Cascade)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}
